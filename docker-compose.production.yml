version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: maskwise-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-maskwise}
      POSTGRES_USER: ${POSTGRES_USER:-maskwise}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init:/docker-entrypoint-initdb.d
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-maskwise}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queues
  redis:
    image: redis:7-alpine
    container_name: maskwise-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microsoft Presidio Analyzer
  presidio-analyzer:
    image: mcr.microsoft.com/presidio-analyzer:latest
    container_name: maskwise-presidio-analyzer
    environment:
      - PORT=3000
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:3000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microsoft Presidio Anonymizer
  presidio-anonymizer:
    image: mcr.microsoft.com/presidio-anonymizer:latest
    container_name: maskwise-presidio-anonymizer
    environment:
      - PORT=3000
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:3000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Tika for document text extraction
  tika:
    image: apache/tika:latest
    container_name: maskwise-tika
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tesseract OCR service
  tesseract:
    image: hertzg/tesseract-server:latest
    container_name: maskwise-tesseract
    environment:
      - PORT=8884
    networks:
      - maskwise-network
    restart: unless-stopped

  # API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: maskwise-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-maskwise}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-maskwise}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      PRESIDIO_ANALYZER_URL: http://presidio-analyzer:3000
      PRESIDIO_ANONYMIZER_URL: http://presidio-anonymizer:3000
      TIKA_URL: http://tika:9998
      TESSERACT_URL: http://tesseract:8884
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL:-admin@maskwise.com}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:80,http://localhost:443}
    volumes:
      - ./uploads:/app/uploads
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      presidio-analyzer:
        condition: service_healthy
      presidio-anonymizer:
        condition: service_healthy
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: ./apps/worker/Dockerfile
    container_name: maskwise-worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-maskwise}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-maskwise}
      REDIS_URL: redis://redis:6379
      PRESIDIO_ANALYZER_URL: http://presidio-analyzer:3000
      PRESIDIO_ANONYMIZER_URL: http://presidio-anonymizer:3000
      TIKA_URL: http://tika:9998
      TESSERACT_URL: http://tesseract:8884
    volumes:
      - ./uploads:/app/uploads
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - maskwise-network
    restart: unless-stopped

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost/api}
    container_name: maskwise-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost/api}
    depends_on:
      - api
    networks:
      - maskwise-network
    restart: unless-stopped

  # Nginx Reverse Proxy (with SSL support - disabled by default)
  nginx:
    image: nginx:alpine
    container_name: maskwise-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - maskwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  maskwise-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local